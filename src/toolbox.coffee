#
# Library of utility methods
#

module.exports = exports = {}

clone = exports.clone = (obj) -> JSON.parse(JSON.stringify(obj))

extend = exports.extend = (object, properties) ->
  ret = {}
  for key, val of object
    ret[key] = val
  for key, val of properties
    ret[key] = val
  ret

# (() -> M<_>) -> (T -> M<_>) -> Array<T> -> M<_>
#
# `chain` monads generated by calling f (T -> M<_>) on each element
monadsChain = exports.monadsChain = (init, f) -> (array) ->
  m = init()
  array.forEach (value) ->
    m = m.chain f.bind(null, value)
  m

taskFromNode = exports.taskFromNode =
(reject, resolve) -> (err, value) ->
  if err then reject err else resolve value

safeParseJSON = exports.safeParseJSON = (reply) ->
  try
    return JSON.parse(reply)
  catch err
    return null

